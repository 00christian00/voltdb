/*
 * Generate input test scripts to verify index behaviour.
 * 
 * Unique / Non-unique
 * Ints-only / Not Ints-only
 * Array, Tree, Hash implementations
 * Key sizes
 */
package main

import (
    "fmt"
    "rand"
    // "container/list"
)

var (
    rng = rand.NewSource(0)
)


/*
 * Data types known to the test harness:
 *
 * int  : integer
 * bint, sint, tint : sized integer
 * float : float
 * dec : decimal
 * str : string
 */
func createSchema() []string {
    var columns = 10
    schema := make([]string, columns)
    for ii := 0; ii < len(schema); ii++ {
        // should pick a random type
        schema[ii] = "bint"
    }
    return schema
}

func createTuple(schema []string) []string {
    tuple := make([]string, len(schema))
    for ii := 0; ii < len(schema); ii++ {
        if schema[ii] == "bint" {
            // needs to produce negative values, too
            tuple[ii] = fmt.Sprint(rng.Int63())
        }
    }
    return tuple
}


/*
 * Commands known to the test harness:
 * 
 * is : insert success
 * if : insert failure
 * ls : lookup success
 * lf : lookup failure
 * us : update success
 * uf : update failure
 */


func generateUniqueGenericTree() {
    schema := createSchema()
    // tuples = list.New()

    // print the test introduction
    fmt.Printf("begin TestUniqueGenericTree UniqueGenericTree ")
    printSliceAsList(schema)

    // print the test commands
    for cmd := 0; cmd < 10; cmd++ {
        tuple := createTuple(schema)
        // tuples.PushBack(tuple)
        fmt.Printf("is ")
        printSliceAsList(tuple)
    }
/*
    // print the verification commands
    for e := range tuples.Iter() {
        fmt.Printf("ls ")
        printSliceAsList(e)
    }
*/
    fmt.Println("exec")
}

func printSliceAsList(slice []string) {
    for i := 0; i < len(slice); i++ {
        fmt.Printf(slice[i])
        if (i == len(slice) - 1) { 
            fmt.Printf("\n")
        } else {
            fmt.Printf(",")
        }
    }
}

func main() {
    fmt.Printf("# File generated by index_script_gen.go\n")
    generateUniqueGenericTree()
}
