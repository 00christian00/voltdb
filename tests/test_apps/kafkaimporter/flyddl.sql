load classes sp.jar;

file -inlinebatch BATCH_EOF

CREATE STREAM EVENTS_TO_HBASE PARTITION ON COLUMN EVENT_INSTANCE_ID
EXPORT TO TARGET hbase_connector
(
  EVENT_INSTANCE_ID  INTEGER NOT NULL,
  EVENT_TYPE_ID      INTEGER,
  EVENT_DATE         TIMESTAMP,
  PARTNER_ID         INTEGER,
  CONSUMER_ID        BIGINT,
  ADDRESS            VARCHAR(255),
  SUB_DOMAIN_1       VARCHAR(255),
  SUB_DOMAIN_2       VARCHAR(255),
  SUB_DOMAIN_3       VARCHAR(255),
  EVENT_QUANTITY     INTEGER,
  EVENT_VALUE        FLOAT,
  TRANSACTION_CODE   VARCHAR(50),
  IN_MESSAGE_ID      BIGINT,
  OUT_MESSAGE_ID     BIGINT,
  EVENT_TRACKING_ID  BIGINT,
  TRACKING_RULE_ID   INTEGER
);

CREATE STREAM EVENTS_TO_HDFS PARTITION ON COLUMN EVENT_INSTANCE_ID
EXPORT TO TARGET stream1
(
  EVENT_INSTANCE_ID  INTEGER NOT NULL,
  EVENT_TYPE_ID      INTEGER,
  EVENT_DATE         TIMESTAMP,
  PARTNER_ID         INTEGER,
  CONSUMER_ID        BIGINT,
  ADDRESS            VARCHAR(255),
  SUB_DOMAIN_1       VARCHAR(255),
  SUB_DOMAIN_2       VARCHAR(255),
  SUB_DOMAIN_3       VARCHAR(255),
  EVENT_QUANTITY     INTEGER,
  EVENT_VALUE        FLOAT,
  TRANSACTION_CODE   VARCHAR(50),
  IN_MESSAGE_ID      BIGINT,
  OUT_MESSAGE_ID     BIGINT,
  EVENT_TRACKING_ID  BIGINT,
  TRACKING_RULE_ID   INTEGER
);

CREATE VIEW EVENTS_SUMMARY_VW (
EVENT_INSTANCE_ID,
TOATL_COUNT,
ACK_COUNT,
NACK_COUNT,
FAILED_COUNT,
DELIVERED_COUNT,
RESPONSE_COUNT,
CONVERSION_COUNT,
VALUE,
RESPONSE_COUNT_UNIQUE,
CONVERSION_COUNT_UNIQUE,
CNTL_GROUP_PART_COUNT,
CNTL_GROUP_CON_COUNT,
CNTL_GROUP_UNIQUE_CON_COUNT,
CNTL_GROUP_CON_VALUE,
RESPONSE_VALUE,
UNFORESEEN_RESPONSE_COUNT,
UNFORESEEN_CONVERSION_COUNT,
UNFORESEEN_RESPONSE_VALUE,
UNFORESEEN_CONVERSION_VALUE,
UNFORESEEN_RESP_CNT_UNIQUE,
UNFORESEEN_CONV_CNT_UNIQUE,
FULLFILLMENT_COUNT,
FULFILLMENT_FAIL_COUNT,
FULFILLMENT_FAIL_COST
)
AS SELECT 
           EVENT_INSTANCE_ID,
           COUNT(*) TOATL_COUNT,
           SUM (CASE WHEN event_type_id = 5 THEN 1 ELSE 0 END) ACK_COUNT,
           SUM (CASE WHEN event_type_id = 6 THEN 1 ELSE 0 END) NACK_COUNT,
           SUM (CASE WHEN event_type_id = 8 THEN 1 ELSE 0 END) FAILED_COUNT,
               SUM (CASE WHEN event_type_id = 7 THEN 1 ELSE 0 END) DELIVERED_COUNT,
               SUM (CASE WHEN event_type_id = 9 THEN 1 ELSE 0 END) RESPONSE_COUNT,
               SUM (CASE WHEN event_type_id = 10 THEN 1 ELSE 0 END) CONVERSION_COUNT,
               SUM (CASE WHEN event_type_id = 10 THEN event_value ELSE 0 END) VALUE,
               SUM (CASE WHEN event_type_id = 14 THEN 1 ELSE 0 END) RESPONSE_COUNT_UNIQUE,
               SUM (CASE WHEN event_type_id = 15 THEN 1 ELSE 0 END) CONVERSION_COUNT_UNIQUE,
               SUM (CASE WHEN event_type_id = 30 THEN 1 ELSE 0 END) CNTL_GROUP_PART_COUNT,
               SUM (CASE WHEN event_type_id = 31 THEN 1 ELSE 0 END) CNTL_GROUP_CON_COUNT,
               SUM (CASE WHEN event_type_id = 32 THEN 1 ELSE 0 END) CNTL_GROUP_UNIQUE_CON_COUNT,
               SUM (CASE WHEN event_type_id = 31 THEN event_value ELSE 0 END) CNTL_GROUP_CON_VALUE,
               SUM (CASE WHEN event_type_id = 9 THEN event_value ELSE 0 END) RESPONSE_VALUE,
               SUM (CASE WHEN event_type_id = 28 THEN 1 ELSE 0 END) UNFORESEEN_RESPONSE_COUNT,
               SUM (CASE WHEN event_type_id = 29 THEN 1 ELSE 0 END) UNFORESEEN_CONVERSION_COUNT,
               SUM (CASE WHEN event_type_id = 28 THEN event_value ELSE 0 END) UNFORESEEN_RESPONSE_VALUE,
               SUM (CASE WHEN event_type_id = 29 THEN event_value ELSE 0 END) UNFORESEEN_CONVERSION_VALUE,
               SUM (CASE WHEN event_type_id = 1001 THEN 1 ELSE 0 END) UNFORESEEN_RESP_CNT_UNIQUE,
               SUM (CASE WHEN event_type_id = 1002 THEN 1 ELSE 0 END) UNFORESEEN_CONV_CNT_UNIQUE,
               SUM (CASE WHEN event_type_id = 36 THEN 1 ELSE 0 END) FULLFILLMENT_COUNT,
               SUM (CASE WHEN event_type_id IN (37, 38, 39, 40) THEN 1 ELSE 0 END) FULFILLMENT_FAIL_COUNT,
               SUM (CASE WHEN event_type_id IN (37, 38, 39, 40) THEN event_value ELSE 0 END) FULFILLMENT_FAIL_COST
 FROM EVENTS_TO_HBASE GROUP BY EVENT_INSTANCE_ID;

CREATE STREAM EVENTS_SUMMARY_TO_JDBC PARTITION ON COLUMN EVENT_INSTANCE_ID
EXPORT TO TARGET stream2 (
    EVENT_INSTANCE_ID INTEGER NOT NULL,
    TOATL_COUNT INTEGER,
    ACK_COUNT INTEGER,
    NACK_COUNT INTEGER,
    FAILED_COUNT INTEGER,
    DELIVERED_COUNT INTEGER,
    RESPONSE_COUNT INTEGER,
    CONVERSION_COUNT INTEGER,
    VALUE FLOAT,
    RESPONSE_COUNT_UNIQUE INTEGER,
    CONVERSION_COUNT_UNIQUE INTEGER,
    CNTL_GROUP_PART_COUNT INTEGER,
    CNTL_GROUP_CON_COUNT INTEGER,
    CNTL_GROUP_UNIQUE_CON_COUNT INTEGER,
    CNTL_GROUP_CON_VALUE FLOAT,
    RESPONSE_VALUE FLOAT,
    UNFORESEEN_RESPONSE_COUNT INTEGER,
    UNFORESEEN_CONVERSION_COUNT INTEGER,
    UNFORESEEN_RESPONSE_VALUE FLOAT,
    UNFORESEEN_CONVERSION_VALUE FLOAT,
    UNFORESEEN_RESP_CNT_UNIQUE INTEGER,
    UNFORESEEN_CONV_CNT_UNIQUE INTEGER,
    FULLFILLMENT_COUNT INTEGER,
    FULFILLMENT_FAIL_COUNT INTEGER,
    FULFILLMENT_FAIL_COST FLOAT
);

CREATE PROCEDURE FROM CLASS db.procedures.MoveAggregatedDataToStream;
CREATE PROCEDURE FROM CLASS db.procedures.InsertToStreams;

Create procedure CountSVRows as select count(*) from EVENTS_SUMMARY_VW;

BATCH_EOF
