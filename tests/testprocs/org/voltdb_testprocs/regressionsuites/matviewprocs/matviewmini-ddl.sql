-- Tests for view on join queries.

CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INTEGER NOT NULL,
    NAME VARCHAR(50) NOT NULL,
    ADDRESS VARCHAR(50),
    PRIMARY KEY (CUSTOMER_ID)
);

CREATE PROCEDURE UPDATECUSTOMERS AS
    UPDATE CUSTOMERS SET NAME=?, ADDRESS=? WHERE CUSTOMER_ID=? AND NAME=? AND ADDRESS=?;

CREATE TABLE ORDERS (
    ORDER_ID INTEGER NOT NULL,
    CUSTOMER_ID INTEGER NOT NULL,
    ORDER_TIME TIMESTAMP NOT NULL,
    PRIMARY KEY (ORDER_ID)
);
PARTITION TABLE ORDERS ON COLUMN ORDER_ID;

CREATE PROCEDURE UPDATEORDERS
PARTITION ON TABLE ORDERS COLUMN ORDER_ID PARAMETER 2 AS
    UPDATE ORDERS SET CUSTOMER_ID=?, ORDER_TIME=? WHERE ORDER_ID=? AND CUSTOMER_ID=? AND ORDER_TIME=?;

CREATE TABLE ORDERITEMS (
    ORDER_ID INTEGER NOT NULL,
    PID INTEGER NOT NULL,
    QTY INTEGER NOT NULL
);
PARTITION TABLE ORDERITEMS ON COLUMN ORDER_ID;
CREATE INDEX ORDERITEMS_BY_ID ON ORDERITEMS(ORDER_ID);

CREATE PROCEDURE DELETEORDERITEMS
PARTITION ON TABLE ORDERITEMS COLUMN ORDER_ID AS
    DELETE FROM ORDERITEMS WHERE ORDER_ID=? AND PID=?;

CREATE PROCEDURE UPDATEORDERITEMS
PARTITION ON TABLE ORDERITEMS COLUMN ORDER_ID PARAMETER 2 AS
    UPDATE ORDERITEMS SET PID=?, QTY=? WHERE ORDER_ID=? AND PID=? AND QTY=?;

CREATE TABLE PRODUCTS (
    PID INTEGER NOT NULL,
    PNAME VARCHAR(50) NOT NULL,
    PRICE FLOAT NOT NULL,
    PRIMARY KEY (PID)
);

CREATE PROCEDURE UPDATEPRODUCTS AS
    UPDATE PRODUCTS SET PNAME=?, PRICE=? WHERE PID=? AND PNAME=? AND PRICE=?;

-- replicated join partitioned, no partition column for view table.
CREATE VIEW ORDER_COUNT_NOPCOL (NAME, CNT) AS
    SELECT CUSTOMERS.NAME, COUNT(*)
    FROM CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
    GROUP BY CUSTOMERS.NAME;

CREATE PROCEDURE PROC_ORDER_COUNT_NOPCOL AS
    SELECT CUSTOMERS.NAME, COUNT(*)
    FROM CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
    GROUP BY CUSTOMERS.NAME
    ORDER BY 1;

-- replicated join partitioned, no group by column.
CREATE VIEW ORDER_COUNT_GLOBAL (CNT) AS
    SELECT COUNT(*) FROM
    CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID;

CREATE PROCEDURE PROC_ORDER_COUNT_GLOBAL AS
    SELECT COUNT(*) FROM
    CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
    ORDER BY 1;

-- four source tables, no partition column for view table.
CREATE VIEW ORDER_DETAIL_NOPCOL (NAME, CNT, SUMAMT, MINUNIT, MAXUNIT, ITEMCOUNT) AS
    SELECT
        CUSTOMERS.NAME,
        COUNT(*),
        SUM(PRODUCTS.PRICE * ORDERITEMS.QTY),
        MIN(PRODUCTS.PRICE),
        MAX(PRODUCTS.PRICE),
        COUNT(ORDERITEMS.PID)
    FROM CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
                   JOIN ORDERITEMS ON ORDERS.ORDER_ID = ORDERITEMS.ORDER_ID
                   JOIN PRODUCTS ON ORDERITEMS.PID = PRODUCTS.PID
    GROUP BY CUSTOMERS.NAME;

CREATE PROCEDURE PROC_ORDER_DETAIL_NOPCOL AS
    SELECT
        CUSTOMERS.NAME,
        COUNT(*),
        SUM(PRODUCTS.PRICE * ORDERITEMS.QTY),
        MIN(PRODUCTS.PRICE),
        MAX(PRODUCTS.PRICE),
        COUNT(ORDERITEMS.PID)
    FROM CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
                   JOIN ORDERITEMS ON ORDERS.ORDER_ID = ORDERITEMS.ORDER_ID
                   JOIN PRODUCTS ON ORDERITEMS.PID = PRODUCTS.PID
    GROUP BY CUSTOMERS.NAME
    ORDER BY 1;

-- four source tables, has partition column for view table.
CREATE VIEW ORDER_DETAIL_WITHPCOL (NAME, ORDER_ID, CNT, SUMAMT, MINUNIT, MAXUNIT, ITEMCOUNT) AS
    SELECT
        CUSTOMERS.NAME,
        ORDERS.ORDER_ID,
        COUNT(*),
        SUM(PRODUCTS.PRICE * ORDERITEMS.QTY),
        MIN(PRODUCTS.PRICE),
        MAX(PRODUCTS.PRICE),
        COUNT(ORDERITEMS.PID)
    FROM CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
                   JOIN ORDERITEMS ON ORDERS.ORDER_ID = ORDERITEMS.ORDER_ID
                   JOIN PRODUCTS ON ORDERITEMS.PID = PRODUCTS.PID
    GROUP BY CUSTOMERS.NAME, ORDERS.ORDER_ID;

CREATE PROCEDURE PROC_ORDER_DETAIL_WITHPCOL AS
    SELECT
        CUSTOMERS.NAME,
        ORDERS.ORDER_ID,
        COUNT(*),
        SUM(PRODUCTS.PRICE * ORDERITEMS.QTY),
        MIN(PRODUCTS.PRICE),
        MAX(PRODUCTS.PRICE),
        COUNT(ORDERITEMS.PID)
    FROM CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
                   JOIN ORDERITEMS ON ORDERS.ORDER_ID = ORDERITEMS.ORDER_ID
                   JOIN PRODUCTS ON ORDERITEMS.PID = PRODUCTS.PID
    GROUP BY CUSTOMERS.NAME, ORDERS.ORDER_ID
    ORDER BY 1,2;

-- replicated join partitioned, has where predicate.
CREATE VIEW ORDER2016 (NAME, CNT) AS
    SELECT
        CUSTOMERS.NAME,
        COUNT(*)
    FROM CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
    WHERE ORDERS.ORDER_TIME >= '2016-01-01 00:00:00'
    GROUP BY CUSTOMERS.NAME;

CREATE PROCEDURE PROC_ORDER2016 AS
    SELECT
        CUSTOMERS.NAME,
        COUNT(*)
    FROM CUSTOMERS JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
    WHERE ORDERS.ORDER_TIME >= '2016-01-01 00:00:00'
    GROUP BY CUSTOMERS.NAME
    ORDER BY 1;

-- Shadow tables for restoring after truncation.
CREATE TABLE WAS_CUSTOMERS (
    CUSTOMER_ID INTEGER NOT NULL,
    NAME VARCHAR(50) NOT NULL,
    ADDRESS VARCHAR(50),
    PRIMARY KEY (CUSTOMER_ID)
);

CREATE TABLE WAS_ORDERS (
    ORDER_ID INTEGER NOT NULL,
    CUSTOMER_ID INTEGER NOT NULL,
    ORDER_TIME TIMESTAMP NOT NULL,
    PRIMARY KEY (ORDER_ID)
);
PARTITION TABLE WAS_ORDERS ON COLUMN ORDER_ID;

CREATE TABLE WAS_ORDERITEMS (
    ORDER_ID INTEGER NOT NULL,
    PID INTEGER NOT NULL,
    QTY INTEGER NOT NULL
);
PARTITION TABLE WAS_ORDERITEMS ON COLUMN ORDER_ID;
CREATE INDEX WAS_ORDERITEMS_BY_ID ON WAS_ORDERITEMS(ORDER_ID);

CREATE TABLE WAS_PRODUCTS (
    PID INTEGER NOT NULL,
    PNAME VARCHAR(50) NOT NULL,
    PRICE FLOAT NOT NULL,
    PRIMARY KEY (PID)
);

-- a single table view case
CREATE VIEW QTYPERPRODUCT (PID, CNT, SUMQTY) AS
    SELECT PID, COUNT(*), SUM(QTY)
    FROM ORDERITEMS
    GROUP BY PID;

CREATE PROCEDURE PROC_QTYPERPRODUCT AS
    SELECT PID, COUNT(*), SUM(QTY)
    FROM ORDERITEMS
    GROUP BY PID
    ORDER BY 1;
